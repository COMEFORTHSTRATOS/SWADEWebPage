import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

// Function to generate PDF for a specific report
export const exportToPDF = async (item) => {
  try {    
    // Create a temporary div with proper styling
    const reportDiv = document.createElement('div');
    reportDiv.style.padding = '40px';
    reportDiv.style.position = 'absolute';
    reportDiv.style.left = '-9999px';
    reportDiv.style.backgroundColor = 'white';
    reportDiv.style.width = '595px'; // A4 width
    reportDiv.style.fontFamily = 'Arial, sans-serif';
    reportDiv.style.color = '#333333';

    // Add header with logo and title
    const header = document.createElement('div');
    header.style.marginBottom = '30px';
    header.style.borderBottom = '2px solid #6014cc';
    header.style.paddingBottom = '20px';
    header.innerHTML = `
      <div style="display: flex; justify-content: space-between; align-items: center;">
        <h1 style="color: #6014cc; margin: 0; font-size: 24px;">SWADE Report</h1>
        <div style="color: #666; font-size: 14px; text-align: right;">
          <div>Date: ${new Date().toLocaleDateString()}</div>
          <div>Report ID: ${item.id || 'N/A'}</div>
        </div>
      </div>
    `;
    reportDiv.appendChild(header);

    // Add image section if available
    if (item.url) {
      const imageSection = document.createElement('div');
      imageSection.style.marginBottom = '30px';
      imageSection.style.textAlign = 'center';
      imageSection.innerHTML = `
        <div style="font-weight: bold; color: #6014cc; margin-bottom: 10px; font-size: 18px;">
          Image Preview
        </div>
      `;

      const img = document.createElement('img');
      
      try {
        const response = await fetch(item.url);
        const blob = await response.blob();
        const base64data = await new Promise((resolve) => {
          const reader = new FileReader();
          reader.onloadend = () => resolve(reader.result);
          reader.readAsDataURL(blob);
        });
        
        img.src = base64data;
        img.style.maxWidth = '80%';
        img.style.maxHeight = '300px';
        img.style.objectFit = 'contain';
        img.style.borderRadius = '8px';
        img.style.boxShadow = '0 4px 8px rgba(0,0,0,0.1)';
        
        // Wait for image to load
        await new Promise((resolve) => {
          img.onload = resolve;
        });
        
        imageSection.appendChild(img);
      } catch (imgError) {
        console.error('Error loading image:', imgError);
        imageSection.innerHTML += `
          <div style="color: #dc3545; padding: 15px; background-color: #fff3f3; border-radius: 8px;">
            Image could not be loaded
          </div>
        `;
      }
      
      reportDiv.appendChild(imageSection);
    }

    // Add metadata section with improved styling
    const metadataSection = document.createElement('div');
    metadataSection.style.marginBottom = '30px';
    metadataSection.innerHTML = `
      <div style="font-weight: bold; color: #6014cc; margin-bottom: 10px; font-size: 12px;">
        Report Details
      </div>
    `;

    const metadataGrid = document.createElement('div');
    metadataGrid.style.display = 'grid';
    metadataGrid.style.gridTemplateColumns = 'repeat(2, 1fr)';
    metadataGrid.style.gap = '15px';

    const addMetadataItem = (label, value) => {
      if (value) {
        return `
          <div style="background-color: #f8f9fa; padding: 12px; border-radius: 6px;">
            <div style="color: #6014cc; font-weight: bold; font-size: 12px; margin-bottom: 4px;">
              ${label}
            </div>
            <div style="color: #333; font-size: 14px;">
              ${typeof value === 'object' && value.toDate ? 
                value.toDate().toLocaleString() : 
                String(value)}
            </div>
          </div>
        `;
      }
      return '';
    };

    // Add core metadata
    const metadataHTML = [
      ['File Name', item.name],
      ['Created Date', item.createdAt],
      ['Location', item.location],
      ['Status', item.status],
      ['Uploaded By', item.uploaderName],
      ['Image ID', item.imageId]
    ].map(([label, value]) => addMetadataItem(label, value)).join('');

    metadataGrid.innerHTML = metadataHTML;
    metadataSection.appendChild(metadataGrid);
    reportDiv.appendChild(metadataSection);

    // Add footer
    const footer = document.createElement('div');
    footer.style.borderTop = '1px solid #dee2e6';
    footer.style.marginTop = '10px';
    footer.style.paddingTop = '10px';
    footer.style.fontSize = '12px';
    footer.style.color = '#666';
    footer.innerHTML = `
      <div style="text-align: center;">
        Generated by SWADE Admin Platform<br>
        ${new Date().toLocaleString()}
      </div>
    `;
    reportDiv.appendChild(footer);

    // Add to DOM and generate PDF
    document.body.appendChild(reportDiv);

    const canvas = await html2canvas(reportDiv, {
      scale: 2,
      useCORS: true,
      logging: false,
      allowTaint: true,
      backgroundColor: '#ffffff'
    });

    // Configure PDF
    const imgWidth = 210; // A4 width in mm
    const pageHeight = 297; // A4 height in mm
    const imgHeight = canvas.height * imgWidth / canvas.width;
    
    const pdf = new jsPDF('p', 'mm', 'a4');
    pdf.setProperties({
      title: `SWADE Report - ${item.name}`,
      subject: 'Report Details',
      author: 'SWADE Admin Platform',
      keywords: 'report, swade, admin',
      creator: 'SWADE Admin Platform'
    });

    let heightLeft = imgHeight;
    let position = 0;
    let pageNumber = 1;

    pdf.addImage(canvas.toDataURL('image/jpeg', 1.0), 'JPEG', 0, position, imgWidth, imgHeight, '', 'FAST');
    heightLeft -= pageHeight;

    while (heightLeft >= 0) {
      position = heightLeft - imgHeight;
      pdf.addPage();
      pdf.addImage(canvas.toDataURL('image/jpeg', 1.0), 'JPEG', 0, position, imgWidth, imgHeight, '', 'FAST');
      heightLeft -= pageHeight;
      pageNumber++;
    }

    // Save PDF
    pdf.save(`SWADE_Report_${item.name.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_${Date.now()}.pdf`);
    
    // Cleanup
    document.body.removeChild(reportDiv);
    
    return true;
  } catch (error) {
    console.error('Error generating PDF:', error);
    return false;
  }
};
